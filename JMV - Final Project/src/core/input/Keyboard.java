package core.input;

import static org.lwjgl.glfw.GLFW.GLFW_PRESS;
import static org.lwjgl.glfw.GLFW.GLFW_RELEASE;

/**
 * The Keyboard class will handle all keyboard events (press, release).
 * @author akr_sm64
 */

public class Keyboard {
    private static Keyboard instance;
    private boolean keyPressed[] = new boolean[350]; // Useful variables

    /**
     * Empty constructor.
     */
    
    private Keyboard() {

    }

    /**
     * Get will create a Keyboard instance only if the instance variable is null because this class can only initialized once.
     * @return instance  the Keyboard class instance.
     */
    
    public static Keyboard get() {
        if (Keyboard.instance == null) {
            Keyboard.instance = new Keyboard();
        }

        return Keyboard.instance;
    }
    
    /**
     * This is the key callback which will check for whether a key was pressed or released.
     * @param window  handle to window.
     * @param key  the key which was pressed or released.
     * @param scancode  the signal generated by the key.
     * @param action  if pressed - released - repeated... etc.
     * @param mods  if any modifier keys were pressed (ctrl, alt, shift...).
     */

    public static void keyCallback(long window, int key, int scancode, int action, int mods) {
        if (action == GLFW_PRESS) {
            get().keyPressed[key] = true;
        } else if (action == GLFW_RELEASE) {
            get().keyPressed[key] = false;
        }
    }
    
    /**
     * Check if any key was pressed.
     * @param keyCode  the specific key.
     */

    public static boolean isKeyPressed(int keyCode) {
        return get().keyPressed[keyCode];
    }
}